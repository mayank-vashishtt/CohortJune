goal of website -- allow one person to another computer --- another computer<give me some content -- html,css and java files>
goal of browser -- allow users to hit specific servers using URL, it give back css,html and js and render back it on screen 

js is KEY 

 HTML ---- 

 Tags -- img
 Attributes -- src

 div -- one full width of a line , if more than that it will overflow  
 span -- it will only take as much space as it needs , dont go to next line 


 CSS --- 

 background 
 border-radius 
 border 1px solid black 
 padding
 margin 
 box-shadow 2px 10px 10px black
 font-size


 flexbox works for only immediate children


 JS ---- 

 replit
 Interpreted lang
 line by line lang
 single threded lang 
 dynamic lang 

 java ,  c is static lang 


 ECMAScript 
 it is a scripting language in which js is based 
 serve as the guideline on the rules for scripting language design ES6, ES5

 js
it is a scripting lang that conforms to the ECMAScript specification 
js even have additional feature -- setinterval , fs, 

v8  - chrome open-source
spidermonkey  -- firefox
these are compiler which compile js code and should be changeed acc to latest ECMAScript updates 






Node.js and its runtime 
node.js is a runtime something which cann run js 


js meant to be on browser



v8 c++  and spidermonkey rust
js ko convert krte h byte code
v8 me add kri few things on top -- node.js 
it a runtime which is used to implement js code on backend 

use case - 
clis 
http server -- exposes your alogrithm to the world, it let people request for and use your logic -- framework -- express, next.js
video player
games



Bun 
competitor of Node.js 
written in zig 

HTTP 
when meet hand shake
it is machine to communicate  
most common way to website frontent to talk to its backend 

open AI -- close sourced model 


HTTP server -- thing that exposes code to the world with authentication -- Remote procedure call 


HTTP 

things that client should worry about , sending the req 
- protocol -- http  / https 
- address - url / ip /port 
- route 
- method 
- header body qyery params


server needs to worry 
-response header 
-status code 
-response body 

protocol + url + route 
http :// chat.openai.com  / backend-api/conversation \

?? backend know you are logged in through cookies <it is one of the header> authorization same as cookie  



?? what happend when you enter google.com in your browser 
 browser parsess the URL 
 does a DNS lookup -- convert is to IP 
 establish the conncetion to the  IP 


-DNS resolution 
urls are like contact in your phone 
they are map to IP 
apna URL chahiye , to usse point krna pdega apne system ke IP pr 

?? on server after the request is achievied 
 you get the inputs 
 you do some computation on it 
 you return the output 


 -get post delete put  CRUD

-status code 
 200 -- everything is right
 404 -- page/route not found 
 403 -- authentication issue 
 500 -- internal server error 


 express.js 
 it is a library 



running the get function in my phone as using laptop ip using ifconfig ANd having laptop and phone on same wifi 

in script in html there is variable called const backendUrl = ""

//  create a todo app that lets user store todos on the server


 


postgresql://test_owner:fLctdWj2Y7kr@ep-falling-butterfly-a5pvncjr.us-east-2.aws.neon.tech/test?sslmode=require

middlewares 

2 pre-checks any website do -- 
authentication
input validation 


hashing and encryption 
JWT , jwt.io json web token , you need password to verify it


local storage


JWT
generating a jwt  -- getting the jwt through backend 

decoding a jwt -- copying it , being close to it but can't verify it 

verifying a jwt -- if come back, then it can verify it 



DOM -- document object model 
js makes html page active and dyanmic via DOM 


react -- library



database -- where data is stored persistently



Difference between Let var and const
var: Function-scoped, hoisted with initialization to undefined, can be re-declared and updated.
let: Block-scoped, hoisted without initialization, cannot be re-declared in the same scope but can be updated.
const: Block-scoped, hoisted without initialization, cannot be re-declared or updated (except for object properties and array elements).





Basic of JS

Console.log(2 == “2”) — answer will be true , a string is converted to a number<implicitly>
Putting + in front of  string, makes it type a “number” (+”232”)<explicitly>
+”abc” is a NaN but type of is number
+"abc" == +"abc”, is false ; you can’t compare infinity with infinity
=== compares even data type
1 + “abc”, will be “1abc”; number is getting converted to string <implicitly>
-“21” — <explicit>number conversion 
1 + 2 + "3" + "abc"+ 3 — here , 1+2 = 3, and then ‘33abc3’
1 + + "1" + "abc" — ‘2abc’
null === undefined , false
null == undefined, true
console.log(false == ‘0’), true
console.log(false === ‘0’), false


Array 

Var a  = [];
Var b = new Array(0), constructer function (new)
Double the array : map function 
let numbers = [4, 9, 16, 25]; let found = numbers.find(element => element > 10); console.log(found); // 16
let numbers = [4, 9, 16, 25]; let index = numbers.findIndex(element => element > 10); console.log(index); // 2
let fruits = ["apple", "banana", "mango"];
console.log(fruits.includes("banana")); // true
a.find(function(elsm){ return elm === 2})


a.unshift(2) — to add elements in the beginning 
a.push(12) — to add elements  in the last 
a.pop — remove the last element and return it
a.shift — removes the first element and return it 


Var a = [1,2,3];
Var b = a
B.push(10) — here both are referring to same memory location 

var a = [1,2,3]
var b = a 
a = [] — here even now b will have 1,2,3 and a is empty 

When the value gets garage collected — when it is not having any reference in the code

a.length = 0 — to make an arr empty 

var a = [1,2,3]
a.length = 10 — rest of the value become undefined and are empty 


Type of an array is an object


String 

let index = text.search(/mn/);  — to search in string 
let text = "Hello, world!";
let index = text.indexOf("world");
console.log(index); // 7
let text = "Hello, world!";
console.log(text.includes("world")); // true



Function declaration 

function abc(a,c){
        console.log(arguments)  — to print n number of argument that are passed 

}
abc(1,2,3,4,5,6,7) 


Function expression

var a = function(){
— you assign a anonymous function to a variable

}




function abc(){
    return function(){
        console.log("a")
    }
}
abc()  — this will not return a, it can’t return return statement 

var a = abc() — it can return console logs one 
a() — these will return the return statement 



function abc(a){
     a()
}

function cb(){
    console.log(213)
    
    return 21
}

var ans = abc(cb)
console.log(ans)

If you are calling and storing a function and it don’t have return statement, then it will store undefined 



Object


Var a = {
	k:10
        Barks: function(){
          
          }
}

a.k — to get value of k

Var b = “k”;
a[b]
a[“k”] — even this is valid , dynamically access a key though this

a.y =21 — to create a new key



Var a = new Object();





function Dog(name, breed, age) {
    this.name = name;  — this is current calling object 
    this.breed = breed;
    this.age = age;

    this.bark = function() {
        console.log(`${this.name} says woof!`);
    };
}

// Create instances of Dog
let dog1 = new Dog("Buddy", "Golden Retriever", 3);
let dog2 = new Dog("Max", "Beagle", 5);
let dog3 = new Dog("Bella", "Labrador", 2);

// Use the instances
console.log(dog1); // Dog { name: 'Buddy', breed: 'Golden Retriever', age: 3, bark: [Function] }
dog1.bark(); // Buddy says woof!





Global AND Local SCOPE 

Global scope in javascript — window(variable are in the scope of the function in window)
window.a 

var a = 10 
function abc(){
    console.log(a)
    var a = 20 
}

abc()
Local scope gets preference 

Hoisting  —  var a goes up ; and a =20 be there;

In JavaScript, variable declarations (but not initialisations) are "hoisted" to the top of their containing function or block. This means that the declaration of the variable is processed before any code is executed, but the assignment (initialisation) stays in place.

Can you use a variable before it declare. — yes but value is undefined 

Var y = 1, x = y= type0f x












